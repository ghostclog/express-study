<%- include('common/header', { user: typeof user !== 'undefined' ? user : null, title: mode === 'edit' ? '게시글 수정' : '새 글 작성' }) %>

<%
    const isEditMode = mode === 'edit';
    const formAction = isEditMode ? `/post/api/posts/${post.id}` : '/post/api/posts';
    const formMethod = isEditMode ? 'PUT' : 'POST';
    const postData = (isEditMode && post) ? post : { title: '', contents: '', post_type: 'common' };
    
    // 사용자에게 보여줄 텍스트와 실제 값 매핑
    const postTypeOptions = {
        'common': '일반',
        'video_share': '영상 공유'
    };
%>

<div class="card">
    <div class="card-body">
        <h1 class="mb-4"><%= isEditMode ? '게시글 수정' : '새 글 작성' %></h1>

        <form id="post-form">
            <div class="mb-3">
                <label for="title" class="form-label">제목</label>
                <input type="text" class="form-control" id="title" name="title" value="<%= postData.title %>" required>
            </div>

            <div class="mb-3">
                <label for="post_type" class="form-label">게시글 종류</label>
                <select class="form-select" id="post_type" name="post_type">
                    <% for (const [value, text] of Object.entries(postTypeOptions)) { %>
                        <option value="<%= value %>" <%= postData.post_type === value ? 'selected' : '' %>>
                            <%= text %>
                        </option>
                    <% } %>
                </select>
            </div>

            <div class="mb-3" id="video-upload-section" style="display: none;">
                <label for="videoFile" class="form-label">영상 파일</label>
                <input type="file" class="form-control" id="videoFile" name="videoFile" accept="video/*">
                <% if (isEditMode && post && post.video) { %>
                    <div class="form-text">현재 영상: <%= post.video.original_name %></div>
                <% } %>
            </div>

            <div class="mb-3">
                <label for="contents" class="form-label">내용</label>
                <textarea class="form-control" id="contents" name="contents" rows="10" required><%= postData.contents %></textarea>
            </div>

            <div class="d-flex justify-content-end">
                <a href="/post/posts" class="btn btn-secondary me-2">취소</a>
                <button type="submit" class="btn btn-primary"><%= isEditMode ? '수정하기' : '작성하기' %></button>
            </div>
        </form>

        <div class="mt-4" id="upload-progress-section" style="display: none;">
            <h5>영상 업로드 진행률</h5>
            <div class="progress">
                <div id="upload-progress-bar" class="progress-bar" role="progressbar" style="width: 0%;" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100">0%</div>
            </div>
            <div id="upload-status" class="mt-1"></div>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        const postTypeSelect = document.getElementById('post_type');
        const videoUploadSection = document.getElementById('video-upload-section');

        function toggleVideoUpload() {
            if (postTypeSelect.value === 'video_share') {
                videoUploadSection.style.display = 'block';
            } else {
                videoUploadSection.style.display = 'none';
            }
        }

        // 페이지 로드 시 초기 상태 설정
        toggleVideoUpload();

        // select 변경 시 상태 업데이트
        postTypeSelect.addEventListener('change', toggleVideoUpload);
    });

    document.getElementById('post-form').addEventListener('submit', async (e) => {
        e.preventDefault();
        
        const form = e.target;
        const submitButton = form.querySelector('button[type="submit"]');
        const formData = new FormData(form);
        const data = Object.fromEntries(formData.entries());
        const videoFile = document.getElementById('videoFile').files[0];
        
        submitButton.disabled = true;

        try {
            // 1. 게시글 내용 먼저 전송
            const postResponse = await fetch('<%= formAction %>', {
                method: '<%= formMethod %>',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    title: data.title,
                    contents: data.contents,
                    post_type: data.post_type
                }),
            });

            if (!postResponse.ok) {
                const errorText = await postResponse.text();
                throw new Error(`게시글 저장 실패: ${errorText}`);
            }

            const postResult = await postResponse.json();
            const postId = postResult.id;

            // 2. 영상 공유 게시글이고, 업로드할 파일이 있는 경우에만 영상 업로드 진행
            if (data.post_type === 'video_share' && videoFile) {
                await uploadVideo(postId, videoFile);
            }

            // 3. 모든 작업 완료 후 상세 페이지로 이동
            window.location.href = `/post/posts/${postId}`;

        } catch (error) {
            console.error('Form submission error:', error);
            alert(error.message || '요청 처리 중 오류가 발생했습니다.');
            submitButton.disabled = false;
        }
    });

    function uploadVideo(postId, file) {
        return new Promise((resolve, reject) => {
            const progressSection = document.getElementById('upload-progress-section');
            const progressBar = document.getElementById('upload-progress-bar');
            const uploadStatus = document.getElementById('upload-status');

            progressSection.style.display = 'block';
            uploadStatus.textContent = '업로드 준비 중...';

            const formData = new FormData();
            formData.append('video', file);

            const xhr = new XMLHttpRequest();
            xhr.open('POST', `/post/api/posts/${postId}/upload`, true);

            xhr.upload.onprogress = (event) => {
                if (event.lengthComputable) {
                    const percentComplete = (event.loaded / event.total) * 100;
                    const percentRounded = Math.round(percentComplete);
                    progressBar.style.width = percentRounded + '%';
                    progressBar.textContent = percentRounded + '%';
                    progressBar.setAttribute('aria-valuenow', percentRounded);
                    uploadStatus.textContent = `업로드 중... (${percentRounded}%)`;
                }
            };

            xhr.onload = () => {
                if (xhr.status >= 200 && xhr.status < 300) {
                    uploadStatus.textContent = '업로드 성공!';
                    progressBar.classList.add('bg-success');
                    resolve(xhr.response);
                } else {
                    progressBar.classList.add('bg-danger');
                    uploadStatus.textContent = `업로드 실패: ${xhr.responseText}`;
                    reject(new Error(`Upload failed with status ${xhr.status}`));
                }
            };

            xhr.onerror = () => {
                progressBar.classList.add('bg-danger');
                uploadStatus.textContent = '네트워크 오류가 발생했습니다.';
                reject(new Error('Network error during upload.'));
            };

            xhr.send(formData);
        });
    }
</script>

<%- include('common/footer') %>
