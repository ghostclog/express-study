<%- include('common/header', { user: typeof user !== 'undefined' ? user : null, title: '영상 업로드' }) %>

<div class="card">
    <div class="card-body">
        <h1 class="mb-4">영상 업로드: <%= post.title %></h1>

        <form id="video-upload-form" action="/post/api/posts/<%= post.id %>/upload" method="POST" enctype="multipart/form-data">
            <div class="mb-3">
                <label for="videoFile" class="form-label">영상 파일 선택</label>
                <input type="file" class="form-control" id="videoFile" name="video" accept="video/*" required>
            </div>

            <div class="progress mb-3" style="display: none;">
                <div id="upload-progress-bar" class="progress-bar" role="progressbar" style="width: 0%;" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100">0%</div>
            </div>

            <div class="d-flex justify-content-end">
                <a href="/post/posts/<%= post.id %>" class="btn btn-secondary me-2">게시글로 돌아가기</a>
                <button type="submit" class="btn btn-primary">업로드 시작</button>
            </div>
        </form>
        <div id="upload-status" class="mt-3"></div>
    </div>
</div>

<script>
    document.getElementById('video-upload-form').addEventListener('submit', async (e) => {
        e.preventDefault();
        
        const form = e.target;
        const formData = new FormData(form);
        const progressBar = document.getElementById('upload-progress-bar');
        const progressContainer = document.querySelector('.progress');
        const uploadStatus = document.getElementById('upload-status');
        const submitButton = form.querySelector('button[type="submit"]');

        progressContainer.style.display = 'block';
        submitButton.disabled = true;
        uploadStatus.textContent = '업로드 중...';

        try {
            const xhr = new XMLHttpRequest();
            xhr.open('POST', form.action, true);

            xhr.upload.onprogress = (event) => {
                if (event.lengthComputable) {
                    const percentComplete = (event.loaded / event.total) * 100;
                    progressBar.style.width = percentComplete + '%';
                    progressBar.textContent = Math.round(percentComplete) + '%';
                    progressBar.setAttribute('aria-valuenow', percentComplete);
                }
            };

            xhr.onload = () => {
                if (xhr.status >= 200 && xhr.status < 300) {
                    uploadStatus.textContent = '업로드 성공!';
                    progressBar.classList.add('bg-success');
                    setTimeout(() => {
                        window.location.href = `/post/posts/<%= post.id %>`;
                    }, 1000);
                } else {
                    uploadStatus.textContent = `업로드 실패: ${xhr.responseText}`;
                    progressBar.classList.add('bg-danger');
                    submitButton.disabled = false;
                }
            };

            xhr.onerror = () => {
                uploadStatus.textContent = '네트워크 오류가 발생했습니다.';
                progressBar.classList.add('bg-danger');
                submitButton.disabled = false;
            };

            xhr.send(formData);

        } catch (error) {
            console.error('Upload error:', error);
            uploadStatus.textContent = '업로드 중 오류가 발생했습니다.';
            progressBar.classList.add('bg-danger');
            submitButton.disabled = false;
        }
    });
</script>

<%- include('common/footer') %>
