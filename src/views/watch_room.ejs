<%- include('common/header', { user: typeof user !== 'undefined' ? user : null, title: '영상 함께보기' }) %>
<link href="https://vjs.zencdn.net/7.17.0/video-js.css" rel="stylesheet" />

<div class="container-fluid">
    <div class="row">
        <div class="col-lg-9">
            <div class="card">
                <div class="card-body">
                    <h1 class="mb-4"><%= post.title %></h1>
                    <% if (post.video) { %>
                        <video id="shared-video" class="video-js vjs-default-skin vjs-big-play-centered vjs-fluid" preload="auto" data-setup='{"fluid": true}'>
                            <source src="/<%= post.video.file_path.replace(/\\/g, '/') %>" type="<%= post.video.mimetype %>">
                            브라우저가 비디오 태그를 지원하지 않습니다.
                        </video>
                    <% } else { %>
                        <p class="text-center">재생할 영상이 없습니다.</p>
                    <% } %>
                </div>
            </div>
        </div>
        <div class="col-lg-3">
            <% if (isHost) { %>
            <div class="card mb-3">
                <div class="card-header">
                    <h5>리모컨</h5>
                </div>
                <div class="card-body text-center">
                    <button id="remote-play" class="btn btn-primary me-2">재생</button>
                    <button id="remote-pause" class="btn btn-secondary">일시정지</button>
                </div>
            </div>
            <% } %>
            <div class="card">
                <div class="card-header">
                    <h5>참가자 목록</h5>
                </div>
                <ul id="user-list" class="list-group list-group-flush">
                    <!-- User list will be populated here -->
                </ul>
            </div>
            <div class="mt-3">
                 <p>이 링크를 친구에게 공유하여 함께보세요: <a href="<%= watchUrl %>"><%= watchUrl %></a></p>
            </div>
        </div>
    </div>
</div>


<script id="user-data" type="application/json"><%- JSON.stringify(user || null) %></script>
<script src="/socket.io/socket.io.js"></script>
<script src="https://vjs.zencdn.net/7.17.0/video.min.js"></script>
<script>
    document.addEventListener('DOMContentLoaded', () => {
        const isHost = <%- JSON.stringify(isHost) %>;
        const roomId = '<%= post.id %>';
        const player = videojs('shared-video');
        const currentUser = JSON.parse(document.getElementById('user-data').textContent || 'null');
        
        let isReceivingSync = false;

        // Disable controls for ALL users. Host will use the remote.
        player.controls(false);

        const socket = io();
        socket.emit('join_room', { roomId, user: { name: currentUser ? currentUser.name : 'Guest' } });

        if (isHost) {
            const playBtn = document.getElementById('remote-play');
            const pauseBtn = document.getElementById('remote-pause');

            const sendControl = (type, currentTime) => {
                socket.emit('host_control', {
                    roomId: roomId,
                    type: type,
                    currentTime: currentTime
                });
            };

            // Remote listeners control the LOCAL player directly.
            // The player's event listeners below will then sync the action to others.
            playBtn.addEventListener('click', () => player.play());
            pauseBtn.addEventListener('click', () => player.pause());

            // Player listeners
            player.on('play', () => {
                if (isReceivingSync) return;
                sendControl('play', player.currentTime());
            });
            player.on('pause', () => {
                if (isReceivingSync) return;
                sendControl('pause', player.currentTime());
            });
            player.on('seeked', () => {
                if (isReceivingSync) return;
                sendControl('seek', player.currentTime());
            });
        }

        socket.on('update_user_list', (users) => {
            const userList = document.getElementById('user-list');
            userList.innerHTML = '';
            users.forEach(user => {
                const li = document.createElement('li');
                li.className = 'list-group-item';
                li.textContent = user.name + (user.id === socket.id ? ' (나)' : '');
                userList.appendChild(li);
            });
        });

        socket.on('sync_control', (data) => {
            const { type, currentTime } = data;
            isReceivingSync = true;

            const smallTimeDiff = Math.abs(player.currentTime() - currentTime);
            if (smallTimeDiff > 1.5) { // Sync time if it's off by more than 1.5s
                player.currentTime(currentTime);
            }

            switch (type) {
                case 'play':
                    player.play();
                    break;
                case 'pause':
                    player.pause();
                    break;
            }
            
            // Allow player events to be captured again after a short delay
            setTimeout(() => {
                isReceivingSync = false;
            }, 100);
        });
    });
</script>

<%- include('common/footer') %>
